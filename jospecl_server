#!/usr/bin/env jocaml

#load "str.cma"
#load "unix.cma"
#load "ospecl.cma"

let info verbose str =
  if verbose then begin
    Printf.printf "%s\n" str;
    flush stdout
  end else ()

let specs_of_file filename =
  Topdirs.dir_use Format.std_formatter filename;
  Obj.obj (Toploop.getvalue "specs")

let spec_file_runner verbose =
  def run_spec_file(spec_file, send_back) =
    info verbose (Printf.sprintf "rx: %s" spec_file);
    let specs = specs_of_file spec_file in
    Ospecl.Spec.Exec.execute [send_back] specs;
    reply to run_spec_file
  in
  run_spec_file

let _ =
  let usage_message =
    let this_file = (Filename.basename Sys.argv.(0)) in
    Printf.sprintf "usage: %s [options]

Starts a server which listens on the given port. Clients can connect and send filenames of spec source files which define a single value (specs : Ospecl.Spec.t list). These specs will be executed locally and the execution events sent back to the client.
" this_file
  in

  let append_to list_ref value =
    list_ref := !list_ref @ [value]
  in

  let port = ref 0 in
  let include_dirs = ref [] in
  let verbose = ref false in

  Arg.parse (Arg.align [
      ("-l", Arg.Set_int port, "PORT to listen on");
      ("-I", Arg.String (append_to include_dirs), "DIRECTORY to look for .cmo files referenced in the spec files");
      ("-v", Arg.Set verbose, " print debugging output");
  ])
  ignore
  usage_message;

  let address = (Unix.ADDR_INET (Unix.inet_addr_of_string "127.0.0.1", !port)) in

  List.iter Topdirs.dir_directory !include_dirs;
  info !verbose (Printf.sprintf "Listening on port %d" !port);

  Join.Ns.register Join.Ns.here "run_spec_file" (spec_file_runner !verbose);
  Join.Site.listen address;
  JoinHelper.wait_forever ()
